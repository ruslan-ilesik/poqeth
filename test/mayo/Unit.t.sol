// SPDX-License-Identifier: UNLICENSED
// Unit tests
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../../src/mayo/Utils.sol";
import "../../src/mayo/Mayo.sol";
import "../../src/mayo/Params.sol";
import "../../src/mayo/Mayo_nay.sol";

contract UnitTest is Test {
    Params parameters;
    Params.MayoParams _params;
    Utils utils;
    Mayo mayo;
    Mayo_nay mayo_nay;

    function setUp() public {
        parameters = new Params();
        _params = parameters.getParams();
        Params.MayoParams memory params = _params;
        utils = new Utils(params);
        mayo = new Mayo(params);
        mayo_nay = new Mayo_nay(params);
    }

    function testReduce() public view {
        bytes memory input = "hello";
        uint8 prime = 31;
        bytes memory output = utils.reduce(input, prime);

        bytes memory expected = hex"0b080f0f12";
        assert(keccak256(output) == keccak256(expected));
    }

    function testExpand() public view {
        bytes memory data = "";
        uint32 length = 60;
        bytes memory output = utils.expand(data, length);
        assertEq(
            output,
            (bytes)(
                hex"10ca3eff73ebec87d2394fc58560afeab86dac7a21f5e402ea0a55e5c8a6758f1cf8eebf67df4cc8de3bc92242c7a5691a7cdd7efe364b62c1b97063"
            )
        );
    }

    function testExpand_pk() public view {
        Params.MayoParams memory params = _params;
        bytes memory data = "hello";
        bytes memory output = mayo.expand_pk(params, data);
        assert(output.length == 115920);
    }

    function testLinearCombination() public view {
        Params.MayoParams memory params = _params;
        uint test_len = 10000;

        bytes memory matrix = new bytes(params.m * test_len);
        bytes memory coeffs = new bytes(test_len);
        bytes memory output = new bytes(params.m);

        matrix = utils.expand("", uint32(matrix.length));
        coeffs = utils.expand("", uint32(coeffs.length));

        output = utils.linear_combination(
            matrix,
            coeffs,
            test_len,
            params.prime,
            params.m
        );
    }

    function testAddVectors() public view {
        Params.MayoParams memory params = _params;
        bytes memory v1 = utils.expand("", uint32(params.m));
        bytes memory v2 = utils.expand("0", uint32(params.m));
        bytes memory output = utils.add_vectors(params, v1, v2);

        assertEq(
            output,
            (bytes)(
                hex"120100051d1318121b181d031602091d070603131106001e16091214070406140d0115190c07181b150a151e071d1c130b0406100110181b071a1507"
            )
        );
    }

    function testEvaluateP() public view {
        Params.MayoParams memory params = _params;
        // Define test inputs
        bytes memory input = utils.expand("", uint32(params.n));
        bytes memory P1 = utils.expand("", uint32(params.p1_bytes));
        bytes memory P2 = utils.expand("", uint32(params.p2_bytes));

        // Call evaluateP function
        bytes memory result = mayo.evaluateP(params, input, P1, P2);

        assertEq(
            result,
            hex"141415130a021e1007110e0b1519090e0c0916110a120009181e101305071816161e0f170b1b1900191d071b030f13031c0e0316141c1b0805041e04"
        );
    }

    function testMemcmp() public {
        bytes memory a = "hello";
        bytes memory b = "hello";
        assert(utils.memcmp(a, b, 3) == 0);
        b = "world";
        assert(utils.memcmp(a, b, 5) < 0);
        a = "world";
        assert(utils.memcmp(a, b, 3) == 0);
        b = "hello";
        assert(utils.memcmp(a, b, 3) > 0);
        vm.expectRevert("Byte arrays are too short for comparison");
        utils.memcmp(a, b, 6);
    }

    function testReduceExtension() public view {
        Params.MayoParams memory params = _params;
        int[] memory Temp = new int[](2 * params.m - 1);
        bytes memory output = utils.expand("", params.m);
        output = mayo.reduce_extension(params, Temp, output);
        assertEq(
            output,
            hex"101000071612130b181a110b090314111d10111d021c0b02110a170c0e0b18131c0015050a060e0e051c0f03040d0a0c1a00040206170d05071e1306"
        );
    }

    function testMergeOutputs() public view {
        Params.MayoParams memory params = _params;
        bytes memory outputs = utils.expand("", uint32(params.m * params.kc2));
        bytes memory output = utils.expand("", params.m);
        mayo.merge_outputs(params, outputs, output);

        assertEq(
            output,
            hex"10ca3eff73ebec87d2394fc58560afeab86dac7a21f5e402ea0a55e5c8a6758f1cf8eebf67df4cc8de3bc92242c7a5691a7cdd7efe364b62c1b97063"
        );
    }

    function testSampleOilSpace() public view {
        Params.MayoParams memory params = _params;
        bytes memory oil_space = new bytes(params.oil_space_bytes);
        oil_space = mayo.sample_oil_space(params, "seed", oil_space);
        // Assert that every value of oil_space is between 0 and 31
        for (uint i = 0; i < oil_space.length; i++) {
            assert(oil_space[i] >= 0 && oil_space[i] <= bytes1(uint8(31)));
        }
    }

    function testNegate() public view {
        bytes memory v = "hello";
        bytes memory output = utils.negate(v, 31);
        assertEq(output, hex"141710100d");
    }

    function testSwapRow() public view {
        uint32[] memory matrix = new uint32[](1000);
        for (uint32 i = 0; i < 1000; i++) {
            matrix[i] = i;
        }
        uint32[] memory output = utils.swap_row(matrix, 0, 9);
        assertEq(output[0], 9 * 64);
        assertEq(output[9 * 64], 0);
    }

    function testModInverse() public view {
        Params.MayoParams memory params = _params;
        assertEq(utils.mod_inverse(params, 3), 21);
        assertEq(utils.mod_inverse(params, 777), 16);
    }

    function testKeygen() public view {
        Params.MayoParams memory params = _params;
        bytes memory seed = "seed";
        (bytes memory pk, bytes memory sk) = mayo.keygen(params, seed);
        pk;
        sk;
    }

    function testSign() public view {
        Params.MayoParams memory params = _params;
        bytes memory seed = "seed";
        bytes
            memory sk = hex"0f1804021817141815071d010c0e021e00141d1c140d1616021c07140e180703";
        bytes memory message = "hello";
        bytes memory signature = mayo.sign(params, message, sk, seed);
        signature;
    }

    function testVerify() public view {
        Params.MayoParams memory params = _params;
        bytes memory message = "hello";
        bytes
            memory pk = hex"0f1804021817141815071d010c0e021e191407041e12061d1301030b1303081b070700131e1e171e000113190803190b1605161a16140819090a1d1703180317091801110d0d1909020f0a1c170f0f090e130c061d060613141a1c0c0a080d1c190a1c0f0c0709041014050e00150700040b0b1c071c04170a180c0c18071a040400040b191c15131d1717110d0b090707021b0b1c050913030b0b1e0e0d091015011d1c081d040301040c001e0f10160608121e090d0819120a0b0c1405010312130b0e090d06110f071c0e0402130f1d0c09021d14120800100a071509040a071205171403051712020a15191e10140d1218160d1408080c1a1e000c0e05001708140b0a001311120402141901060d0506000f171b0a080d041303101c091013071d130c1e03040308011b121202061a1305040a01091706171d0a061e071616010e11070b0707170902001218141006120715010f070918150e09170b190f10081a0014041e140d121b121c0b121818081d03040b0b05080b0d061c0c01150e19120815070f0f0617140c0c04101c160c050101160a050c0a1e0512070e180b0b0d1e181d0d191b17170c090816131b150e0a0a1a030f021109050b020a0f0814090d14031c0b011d17041108130f07120f0a0318110e04130212140d01180c071d01091101030307000e08150a12170d1c1219021d16000a1b06021e090b1a060305071603000b06000a02050e141b001000141209070c1b0c0a191b000b09110c0a1e140f0918011111091617030609140d0d12161919050c0f19021b161c1c0b0a03151a11030d171b021e14131010151200111b1b0c0f10041a1b021d030d0e06081e180b001e0d0c04050a0b0c0b0b0012190f080b180f14051d0c1310100d101a1b0d1a0c071503160d190d0f140812070e1a02170d17091b0b15071e141c1504000b080e0f13040a1d1c0e1717061e141115121700021e090d0f191a121c18031e101a1d0811051d100505121c1d09060c1915040006141b140713060c161d1b1b06001a000d120e0c0b1717121b010e091a1b170a1b0a071d0a121a0f19060e18010d181a04010d03161d1e1a071905160e1b021c0e0b17111a191d03100c041e1e1714101317031d081b0e1907080e0908031d1d0f1d1a180a151810131d021a011512181c020216111b0f0a0c1c0d070c0111021c080207040915121700021a140f170017100f19151e080f1b1d1c1c1214060e1c10101b04181d1310071a0710010c080f0214010600010e130f150007130505010a1e0e070e0a031410031a1c0e1904061b1410141001091b130f180313010a011201190a1e01171c1e0c1d171c031b16030e121918001d15100b160d1710181e1d120e06101006021406001510001a0b09000314181713060b0e111c02150513040217030c0d1e0816081a0802171e110210051a08180a030b1c0b1b1400031a06190705010918011a0c0e1c1b111319111e0e11010f1917061a0b1603070b09021e01050b1b1919111e141e0f00191a0b1e191709120a0f0f180613010a031a1d171818080710171e1819150e0b1a1210080602120213021610191d1702170d0f01100d03020405070c03050c1b041e1a071c01080702030d1b110e1b150e081200140c05181d151d01170800121811181d0c091d1b180e021905120b0801080c050e01000e021d161c020a161d0711191a1909110e0a19150d040b190b16160c18111c171a16120703170108110603060f1d091919040b18181a010501111a1e";
        bytes
            memory sig = hex"aa37dd40f1b2af37ee64f65ec64c7ed8030e041e020609141d13140f17021615161518051e1c1018021c06030c1b160214181b1106161e0d0500070c0c081413140c11090a071c1318000b1d0012160c1a18151d05181101040514011c0605171e1004071e080f0d191215150012171b0b19120e0d0b111408140207060b1504130a0d1e0515191b1901131519021c100e05011609141c140c050810071d0f190a090d1c14080c0a0f0c1303100d0c050a1201170719010b08020600131c11091d1a1b1011101e15151e0b06180b0a051b0f0718030e16120919070f0a1a0a1315051b081218080b121319140f0b051c111205190a0e0c14121816160c13120c1c12101710181d051e1e1a0d0810191b111408161210151e1b16050a051e061218041b1d050d041d1501070f0b181418071802001503011a12131d050e1119101407140912030b0d04000c0e1b05080d17080d03171d1e1d15111d0513041a19061a1b0b0e181b0d1b0b031710161111121b0b130512181b07110e12051505000e1d031701050b15001b1b0313021a170c0405061b150e0103090c080a04061103000b1d0a081915140e080e120f071b131716031b150f12150f060911050d041703110307141e0912000b1911051c1e180419050501181b061d0f1a0a1b03110e090a120018150d17061609011b0b071a1417170818130919040f1c0e0b110e0a1c010a01160c070a16011211061c19140b1e0f060b001a161b0b161c0104020f12151c16090a0b1b170c111e0b07011d1a071c0b00161c0c171904070e031917181b1213030e16181907011d030b1709130a1c0b05060f1200000d02011e170d0702051210010012150f191718161e0a1216151110070714151818";
        assert(mayo.verify(params, message, pk, sig));
    }

    function testMessageDigest() public view {
        Params.MayoParams memory params = _params;
        bytes memory random_seed = "seed";
        bytes memory message = "hello";
        bytes memory sig_salt = new bytes(params.seed_bytes);
        sig_salt = utils.expand(random_seed, params.seed_bytes);
        bytes memory digest = mayo.message_digest(params, sig_salt, message);
        assertEq(
            digest,
            hex"0600181c02031e0e0b020a1b001a1203081002051a1b1b060a190d1004041803000c0a0b13090f0d131b041d190e02180b1d19180202060b0a031b1b"
        );
    }

    function testCommit() public {
        bytes memory message = "hello";
        bytes
            memory pk = hex"0f1804021817141815071d010c0e021e191407041e12061d1301030b1303081b070700131e1e171e000113190803190b1605161a16140819090a1d1703180317091801110d0d1909020f0a1c170f0f090e130c061d060613141a1c0c0a080d1c190a1c0f0c0709041014050e00150700040b0b1c071c04170a180c0c18071a040400040b191c15131d1717110d0b090707021b0b1c050913030b0b1e0e0d091015011d1c081d040301040c001e0f10160608121e090d0819120a0b0c1405010312130b0e090d06110f071c0e0402130f1d0c09021d14120800100a071509040a071205171403051712020a15191e10140d1218160d1408080c1a1e000c0e05001708140b0a001311120402141901060d0506000f171b0a080d041303101c091013071d130c1e03040308011b121202061a1305040a01091706171d0a061e071616010e11070b0707170902001218141006120715010f070918150e09170b190f10081a0014041e140d121b121c0b121818081d03040b0b05080b0d061c0c01150e19120815070f0f0617140c0c04101c160c050101160a050c0a1e0512070e180b0b0d1e181d0d191b17170c090816131b150e0a0a1a030f021109050b020a0f0814090d14031c0b011d17041108130f07120f0a0318110e04130212140d01180c071d01091101030307000e08150a12170d1c1219021d16000a1b06021e090b1a060305071603000b06000a02050e141b001000141209070c1b0c0a191b000b09110c0a1e140f0918011111091617030609140d0d12161919050c0f19021b161c1c0b0a03151a11030d171b021e14131010151200111b1b0c0f10041a1b021d030d0e06081e180b001e0d0c04050a0b0c0b0b0012190f080b180f14051d0c1310100d101a1b0d1a0c071503160d190d0f140812070e1a02170d17091b0b15071e141c1504000b080e0f13040a1d1c0e1717061e141115121700021e090d0f191a121c18031e101a1d0811051d100505121c1d09060c1915040006141b140713060c161d1b1b06001a000d120e0c0b1717121b010e091a1b170a1b0a071d0a121a0f19060e18010d181a04010d03161d1e1a071905160e1b021c0e0b17111a191d03100c041e1e1714101317031d081b0e1907080e0908031d1d0f1d1a180a151810131d021a011512181c020216111b0f0a0c1c0d070c0111021c080207040915121700021a140f170017100f19151e080f1b1d1c1c1214060e1c10101b04181d1310071a0710010c080f0214010600010e130f150007130505010a1e0e070e0a031410031a1c0e1904061b1410141001091b130f180313010a011201190a1e01171c1e0c1d171c031b16030e121918001d15100b160d1710181e1d120e06101006021406001510001a0b09000314181713060b0e111c02150513040217030c0d1e0816081a0802171e110210051a08180a030b1c0b1b1400031a06190705010918011a0c0e1c1b111319111e0e11010f1917061a0b1603070b09021e01050b1b1919111e141e0f00191a0b1e191709120a0f0f180613010a031a1d171818080710171e1819150e0b1a1210080602120213021610191d1702170d0f01100d03020405070c03050c1b041e1a071c01080702030d1b110e1b150e081200140c05181d151d01170800121811181d0c091d1b180e021905120b0801080c050e01000e021d161c020a161d0711191a1909110e0a19150d040b190b16160c18111c171a16120703170108110603060f1d091919040b18181a010501111a1e";
        bytes
            memory sig = hex"aa37dd40f1b2af37ee64f65ec64c7ed8030e041e020609141d13140f17021615161518051e1c1018021c06030c1b160214181b1106161e0d0500070c0c081413140c11090a071c1318000b1d0012160c1a18151d05181101040514011c0605171e1004071e080f0d191215150012171b0b19120e0d0b111408140207060b1504130a0d1e0515191b1901131519021c100e05011609141c140c050810071d0f190a090d1c14080c0a0f0c1303100d0c050a1201170719010b08020600131c11091d1a1b1011101e15151e0b06180b0a051b0f0718030e16120919070f0a1a0a1315051b081218080b121319140f0b051c111205190a0e0c14121816160c13120c1c12101710181d051e1e1a0d0810191b111408161210151e1b16050a051e061218041b1d050d041d1501070f0b181418071802001503011a12131d050e1119101407140912030b0d04000c0e1b05080d17080d03171d1e1d15111d0513041a19061a1b0b0e181b0d1b0b031710161111121b0b130512181b07110e12051505000e1d031701050b15001b1b0313021a170c0405061b150e0103090c080a04061103000b1d0a081915140e080e120f071b131716031b150f12150f060911050d041703110307141e0912000b1911051c1e180419050501181b061d0f1a0a1b03110e090a120018150d17061609011b0b071a1417170818130919040f1c0e0b110e0a1c010a01160c070a16011211061c19140b1e0f060b001a161b0b161c0104020f12151c16090a0b1b170c111e0b07011d1a071c0b00161c0c171904070e031917181b1213030e16181907011d030b1709130a1c0b05060f1200000d02011e170d0702051210010012150f191718161e0a1216151110070714151818";
        mayo_nay.commit(message, pk, sig);
        assertEq32(
            mayo_nay.commitment(),
            hex"151771a14083c68a899cae931523cdfb3e301726be3afd0f69568df70151f22b"
        );
    }

    function testNay() public {
        Params.MayoParams memory params = _params;
        bytes memory message = "hello";
        bytes
            memory pk = hex"0f1804021817141815071d010c0e021e191407041e12061d1301030b1303081b070700131e1e171e000113190803190b1605161a16140819090a1d1703180317091801110d0d1909020f0a1c170f0f090e130c061d060613141a1c0c0a080d1c190a1c0f0c0709041014050e00150700040b0b1c071c04170a180c0c18071a040400040b191c15131d1717110d0b090707021b0b1c050913030b0b1e0e0d091015011d1c081d040301040c001e0f10160608121e090d0819120a0b0c1405010312130b0e090d06110f071c0e0402130f1d0c09021d14120800100a071509040a071205171403051712020a15191e10140d1218160d1408080c1a1e000c0e05001708140b0a001311120402141901060d0506000f171b0a080d041303101c091013071d130c1e03040308011b121202061a1305040a01091706171d0a061e071616010e11070b0707170902001218141006120715010f070918150e09170b190f10081a0014041e140d121b121c0b121818081d03040b0b05080b0d061c0c01150e19120815070f0f0617140c0c04101c160c050101160a050c0a1e0512070e180b0b0d1e181d0d191b17170c090816131b150e0a0a1a030f021109050b020a0f0814090d14031c0b011d17041108130f07120f0a0318110e04130212140d01180c071d01091101030307000e08150a12170d1c1219021d16000a1b06021e090b1a060305071603000b06000a02050e141b001000141209070c1b0c0a191b000b09110c0a1e140f0918011111091617030609140d0d12161919050c0f19021b161c1c0b0a03151a11030d171b021e14131010151200111b1b0c0f10041a1b021d030d0e06081e180b001e0d0c04050a0b0c0b0b0012190f080b180f14051d0c1310100d101a1b0d1a0c071503160d190d0f140812070e1a02170d17091b0b15071e141c1504000b080e0f13040a1d1c0e1717061e141115121700021e090d0f191a121c18031e101a1d0811051d100505121c1d09060c1915040006141b140713060c161d1b1b06001a000d120e0c0b1717121b010e091a1b170a1b0a071d0a121a0f19060e18010d181a04010d03161d1e1a071905160e1b021c0e0b17111a191d03100c041e1e1714101317031d081b0e1907080e0908031d1d0f1d1a180a151810131d021a011512181c020216111b0f0a0c1c0d070c0111021c080207040915121700021a140f170017100f19151e080f1b1d1c1c1214060e1c10101b04181d1310071a0710010c080f0214010600010e130f150007130505010a1e0e070e0a031410031a1c0e1904061b1410141001091b130f180313010a011201190a1e01171c1e0c1d171c031b16030e121918001d15100b160d1710181e1d120e06101006021406001510001a0b09000314181713060b0e111c02150513040217030c0d1e0816081a0802171e110210051a08180a030b1c0b1b1400031a06190705010918011a0c0e1c1b111319111e0e11010f1917061a0b1603070b09021e01050b1b1919111e141e0f00191a0b1e191709120a0f0f180613010a031a1d171818080710171e1819150e0b1a1210080602120213021610191d1702170d0f01100d03020405070c03050c1b041e1a071c01080702030d1b110e1b150e081200140c05181d151d01170800121811181d0c091d1b180e021905120b0801080c050e01000e021d161c020a161d0711191a1909110e0a19150d040b190b16160c18111c171a16120703170108110603060f1d091919040b18181a010501111a1e";
        bytes
            memory sig = hex"aa37dd40f1b2af37ee64f65ec64c7ed8030e041e020609141d13140f17021615161518051e1c1018021c06030c1b160214181b1106161e0d0500070c0c081413140c11090a071c1318000b1d0012160c1a18151d05181101040514011c0605171e1004071e080f0d191215150012171b0b19120e0d0b111408140207060b1504130a0d1e0515191b1901131519021c100e05011609141c140c050810071d0f190a090d1c14080c0a0f0c1303100d0c050a1201170719010b08020600131c11091d1a1b1011101e15151e0b06180b0a051b0f0718030e16120919070f0a1a0a1315051b081218080b121319140f0b051c111205190a0e0c14121816160c13120c1c12101710181d051e1e1a0d0810191b111408161210151e1b16050a051e061218041b1d050d041d1501070f0b181418071802001503011a12131d050e1119101407140912030b0d04000c0e1b05080d17080d03171d1e1d15111d0513041a19061a1b0b0e181b0d1b0b031710161111121b0b130512181b07110e12051505000e1d031701050b15001b1b0313021a170c0405061b150e0103090c080a04061103000b1d0a081915140e080e120f071b131716031b150f12150f060911050d041703110307141e0912000b1911051c1e180419050501181b061d0f1a0a1b03110e090a120018150d17061609011b0b071a1417170818130919040f1c0e0b110e0a1c010a01160c070a16011211061c19140b1e0f060b001a161b0b161c0104020f12151c16090a0b1b170c111e0b07011d1a071c0b00161c0c171904070e031917181b1213030e16181907011d030b1709130a1c0b05060f1200000d02011e170d0702051210010012150f191718161e0a1216151110070714151818";
        mayo_nay.commit(message, pk, sig);
        assert(mayo_nay.verifyNay(params, message, pk, sig, 0));
    }
}
